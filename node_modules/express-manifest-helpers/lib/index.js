'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});
exports.lookup = lookup;
exports.trimTag = trimTag;
exports.getManifest = getManifest;
exports.getSources = getSources;
exports.getStylesheetSources = getStylesheetSources;
exports.getStylesheets = getStylesheets;
exports.getJavascriptSources = getJavascriptSources;
exports.getJavascripts = getJavascripts;
exports.getImageSources = getImageSources;
exports.getImages = getImages;
exports.assetPath = assetPath;
exports.imageTag = imageTag;
exports.javascriptTag = javascriptTag;
exports.stylesheetTag = stylesheetTag;

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

var _fs = require('fs');

var _fs2 = _interopRequireDefault(_fs);

var _lodashObjectAssign = require('lodash/object/assign');

var _lodashObjectAssign2 = _interopRequireDefault(_lodashObjectAssign);

var manifest;
var options = {};

function loadManifest() {
  if (manifest && options.cache) return manifest;

  try {
    return JSON.parse(_fs2['default'].readFileSync(options.manifestPath, 'utf8'));
  } catch (err) {
    throw new Error('Asset Manifest could not be loaded.');
  }
}

function mapAttrs(attrs) {
  return Object.keys(attrs).map(function (key) {
    return key + '="' + attrs[key] + '"';
  }).join(' ');
}

function lookup(source) {
  manifest = loadManifest();

  if (manifest[source]) return options.prependPath + manifest[source];else return '';
}

function trimTag(str) {
  return str
  // replace double spaces not inside quotes
  .replace(/ {2,}(?=([^"\\]*(\\.|"([^"\\]*\\.)*[^"\\]*"))*[^"]*$)/, ' ')
  // replace extra space in opening tags
  .replace(/ >/, '>')
  // replace extra space in self closing tags
  .replace(/  \/>/, ' />');
}

function getManifest() {
  return manifest || loadManifest();
}

function getSources() {
  manifest = manifest || loadManifest();
  return Object.keys(manifest);
}

function getStylesheetSources() {
  return getSources().filter(function (file) {
    return file.match(/\.css$/);
  });
}

function getStylesheets() {
  return getStylesheetSources().map(function (source) {
    return lookup(source);
  });
}

function getJavascriptSources() {
  return getSources().filter(function (file) {
    return file.match(/\.js$/);
  });
}

function getJavascripts() {
  return getJavascriptSources().map(function (source) {
    return lookup(source);
  });
}

function getImageSources() {
  return getSources().filter(function (file) {
    return file.match(/\.(png|jpe?g|gif|webp|bmp)$/);
  });
}

function getImages() {
  return getImageSources().map(function (source) {
    return lookup(source);
  });
}

function assetPath(source) {
  return lookup(source);
}

function imageTag(source) {
  var attrs = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];

  return trimTag('<img src="' + lookup(source) + '" ' + mapAttrs(attrs) + ' />');
}

function javascriptTag(source) {
  var attrs = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];

  return trimTag('<script src="' + lookup(source) + '" ' + mapAttrs(attrs) + '></script>');
}

function stylesheetTag(source) {
  var attrs = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];

  return trimTag('<link rel="stylesheet" href="' + lookup(source) + '" ' + mapAttrs(attrs) + ' />');
}

exports['default'] = function (opts) {
  var defaults = {
    cache: true,
    prependPath: ''
  };

  manifest = null;
  (0, _lodashObjectAssign2['default'])(options, defaults, opts);

  return function (req, res, next) {
    res.locals.getSources = getSources;
    res.locals.getStylesheetSources = getStylesheetSources;
    res.locals.getStylesheets = getStylesheets;
    res.locals.getJavascriptSources = getJavascriptSources;
    res.locals.getJavascripts = getJavascripts;
    res.locals.getImageSources = getImageSources;
    res.locals.getImages = getImages;
    res.locals.getManifest = getManifest;
    res.locals.assetPath = assetPath;
    res.locals.imageTag = imageTag;
    res.locals.javascriptTag = javascriptTag;
    res.locals.stylesheetTag = stylesheetTag;
    next();
  };
};